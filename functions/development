# -*- mode: sh -*-

DECLARE
  POPRC_ROOT=~/src/poprc

GO(poprc-push-startle)
  BLOCK({{
    cd ~/src/startle
    git config receive.denyCurrentBranch warn
    cd ${POPRC_ROOT}
    git subtree push --prefix=startle ~/src/startle master
  }})

GO(popr) (
    cd ${POPRC_ROOT}
    if [ ! -f eval ]; then
        make eval
    fi
    ./eval -lo *.ppr -im $@
)

GO(quick-git)
    if git rev-parse --git-dir &> /dev/null
    then
        git status
        git log
    else
        git init
        git add $@
        git commit -m "initial commit"
    fi

GO(emacs)
    emacsclient -c -a '' $@

# src dst NAME=VAL ...
GO(scaffold) (
    shopt -s globstar nullglob
    SRC=$1
    DST=$2
    shift 2
    echo "# scaffold: ${SRC} -> ${DST}, $@" > run-scaffold.sh
    DEFINES=""
    SED=""
    for d in $@; do
        DEFINES="${DEFINES} -D$d"
        SED="${SED} -e s=$d=g"
    done
    pushd ${SRC} > /dev/null
    FILES=( **/*.template )
    popd > /dev/null
    for f in "${FILES[@]}"; do
        OUT=`echo "$f" | sed 's/\.template$//' | sed ${SED}`
        echo "mkdir -p $(dirname ${DST}/${OUT})" >> run-scaffold.sh
        echo "m4 ${DEFINES} ${SRC}/$f > ${DST}/${OUT}" >> run-scaffold.sh
    done
    cat run-scaffold.sh
    read -p "Run it? (y/N) " RESPONSE
    RESPONSE=${RESPONSE,,} # tolower
    if [[ "${RESPONSE}" =~ ^(yes|y)$ ]]; then
        echo "running run-scaffold.sh"
        bash run-scaffold.sh
    fi
)

GO(web-server)
    python -m SimpleHTTPServer

GOPY(pytest)
  import os
  print("Hi {}!".format(os.getlogin()))
  for i, arg in enumerate(argv):
    print("arg {} was: {}".format(i, arg))

GO(ok2merge) (
    set -e
    BRANCH="$1"
    PATCH=`mktemp ${BRANCH//\//_}-XXX.patch`
    (
        git format-patch ..${BRANCH} --stdout > ${PATCH}
        git apply ${PATCH} --check
    ) &> /dev/null
    RET=$?
    rm ${PATCH}
    return ${RET}
)

GO(auto) (
  ROOT=`git rev-parse --show-toplevel`
  AUTOFILELIST=.autofilelist
  cd ${ROOT}
  if [ ! -e ${AUTOFILELIST} ]; then
      echo generating .autofilelist
      git ls-files -z \
          | xargs -0 -I files find files -type f \
                  > ${AUTOFILELIST}
  fi
  while true
  do
      (
          #clear
          if (eval "$@"); then
              printf "\n\033[1;32mFinished ${ROOT}\033[0m"
          else
              printf "\n\033[1;31mFailed ${ROOT}\033[0m"
          fi
      ) &

      if which inotifywait &> /dev/null; then
          # use inotifywait
          inotifywait -q -e modify,move,delete \
            --fromfile ${AUTOFILELIST}
      elif which fswatch &> /dev/null; then
          # use fswatch
          xargs -a ${AUTOFILELIST} fswatch -1
      else
          echo "requires inotifywait or fswatch"
          return 1
      fi

      if jobs %% &> /dev/null; then
          echo "Aborting"
          kill %% &> /dev/null
      fi

      # slight pause to allow CTRL-C
      sleep 0.2
  done
)
