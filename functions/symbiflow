# -*- mode: sh -*-

DECLARE
  SF_ROOT=${SF_ROOT:-${HOME}/src/symbiflow-arch-defs}
  XRAY_DIR=$HOME/src/prjxray
  CHANNELS_DB=${CHANNELS_DB:-${SF_ROOT}/build/xc7/archs/artix7/devices/xc7a50t-basys3-x1y0-roi-virt/channels.db}
  #CHANNELS_DB=${SF_ROOT}/build/xc7/archs/artix7/channels.db

GO(sf)
    cd ${SF_ROOT}
    if [ "$FHS_USER_ENV" != "true" ]
    then
        rm -f ~/.gcroots/sf-shell
        nix-instantiate ~/nix/sf-shell.nix --add-root ~/.gcroots/sf-shell --indirect &> /dev/null
        nix-shell ~/nix/sf-shell.nix
    fi

GO(bit2vivado)
    source ~/src/prjxray/database/artix7/settings.sh
    source ~/src/prjxray/minitests/roi_harness/basys3-swbut.sh
    BLOCK({{
      FILE(runme.tcl, {{
create_project -force -part $::env(XRAY_PART) design design

read_verilog top_bit.v
synth_design -top top
write_checkpoint -force design_pre_force.dcp
source top_bit.v.tcl

create_clock -period 10.000 -name clk -waveform {0.000 5.000} [get_ports clk]

set_property CFGBVS VCCO [current_design]
set_property CONFIG_VOLTAGE 3.3 [current_design]
set_property BITSTREAM.GENERAL.PERFRAMECRC YES [current_design]
set_property IS_ENABLED 0 [get_drc_checks {LUTLP-1}]

write_checkpoint -force design_pre_place.dcp
place_design
route_design

write_checkpoint -force design.dcp
write_bitstream -force design.bit
save_project_as -force design.xpr}})
      ${XRAY_VIVADO} -source runme.tcl
      ${XRAY_BITREAD} -F $XRAY_ROI_FRAMES -o design.bits -z -y design.bit
      ${XRAY_BIT2FASM} --verbose design.bit > design.fasm
    }})

GO(open_in_vivado)
    source ~/src/prjxray/database/artix7/settings.sh
    source ~/src/prjxray/minitests/roi_harness/basys3-swbut.sh
    BLOCK({{
      if [ $1 = "batch" ]; then
          BATCH="-mode batch"
          echo "batch mode"
          shift
      fi

      FILE_VAR(runme.tcl, {{
create_project -force -part \$::env(XRAY_PART) design design

#set_param synth.elaboration.rodinMoreOptions "rt::set_parameter compatibilityMode true"

foreach v {$@} {
  read_verilog \$v
}
synth_design -top top

set_property CFGBVS VCCO [current_design]
set_property CONFIG_VOLTAGE 3.3 [current_design]
set_property BITSTREAM.GENERAL.PERFRAMECRC YES [current_design]

set pins {tx       A18
          rx       B18
          sw[0]    V17
          sw[1]    V16
          sw[2]    W16
          sw[3]    W17
          sw[4]    W15
          sw[5]    V15
          sw[6]    W14
          sw[7]    W13
          sw[8]    V2
          sw[9]    T3
          sw[10]   T2
          sw[11]   R3
          sw[12]   W2
          sw[13]   U1
          sw[14]   T1
          sw[15]   R2
          in[0]    V17
          in[1]    V16
          in[2]    W16
          in[3]    W17
          in[4]    W15
          in[5]    V15
          in[6]    W14
          in[7]    W13
          in[8]    V2
          in[9]    T3
          in[10]   T2
          in[11]   R3
          in[12]   W2
          in[13]   U1
          in[14]   T1
          in[15]   R2
          led[0]   U16
          led[1]   E19
          led[2]   U19
          led[3]   V19
          led[4]   W18
          led[5]   U15
          led[6]   U14
          led[7]   V14
          led[8]   V13
          led[9]   V3
          led[10]  W3
          led[11]  U3
          led[12]  P3
          led[13]  N3
          led[14]  P1
          led[15]  L1
          out[0]   U16
          out[1]   E19
          out[2]   U19
          out[3]   V19
          out[4]   W18
          out[5]   U15
          out[6]   U14
          out[7]   V14
          out[8]   V13
          out[9]   V3
          out[10]  W3
          out[11]  U3
          out[12]  P3
          out[13]  N3
          out[14]  P1
          out[15]  L1
          clk      W5}

foreach {port_name pin} \$pins {
    set ports [get_ports \$port_name]
    if { [llength \$ports] > 0 } {
        set_property -dict "PACKAGE_PIN \$pin IOSTANDARD LVCMOS33" \$ports
    }
}

write_checkpoint -force design_pre_place.dcp
place_design
route_design

write_checkpoint -force design.dcp
write_bitstream -force design.bit
save_project_as -force design.xpr}})
      ${XRAY_VIVADO} ${BATCH} -source runme.tcl
    }})

GO(write_bit)
    openocd -f $XRAY_DIR/utils/openocd/board-digilent-basys3.cfg -c "init; pld load 0 $1; exit" || return

define({{WITH_LOG}}, {{(
  export RUNME="$2"
  script --quiet --output-limit 32M --command '${RUNME}' "$1"
)
}})dnl

GO(sf_build) (
    export VPR_NUM_WORKERS=${VPR_NUM_WORKERS:-`nproc`}
    if [ ! -d ${SF_ROOT} ]; then
        echo "SF_ROOT not set correctly"
        return
    elif [ ! -d ${SF_ROOT}/build ]; then
        make -C ${SF_ROOT} env
    fi
    GO_CALL(notify_start)

    WITH_LOG(${SF_ROOT}/build/build.log, {{
      make -j`nproc` -C ${SF_ROOT}/build $@
    }})

    ERR="`GO_CALL(error_message)`"
    RET=$?
    if [ $RET == 0 ]; then
        GO_CALL(notify) "sf_build $@: ${ERR}"
        echo "ERROR: ${ERR}"
    else
        GO_CALL(notify) "sf_build $@: SUCCESS"
    fi
)

GO(error_command) (
    RESULTS=(`grep -m 1 '^make.*\*\*\*.*Error' ${SF_ROOT}/build/build.log \
                   | sed -n -e 's/^.*\*\*\* \[\([^:]*\):\([0-9]\+\).*$/\2 \1/p'`)
    if [ "$1" == "where" ]; then
        echo "${SF_ROOT}/build/${RESULTS[1]}:${RESULTS[0]}" | sed -e "s+${SF_ROOT}+\${SF_ROOT}+g"
    else
        sed -n ${RESULTS[0]}p ${SF_ROOT}/build/${RESULTS[1]} | sed -e "s+${SF_ROOT}+\${SF_ROOT}+g" -e "s+/[^ ]*/cmake -E env+env+g"
    fi
)

GO(retry_error_command) (
    CMD="`GO_CALL(error_command)`"
    FILES="`GO_CALL(string_to_files) \"${CMD}\"`"
    if [ "$1" == "watch" ]; then
        shift
        echo "${CMD} $@"
        if GO_CALL(prompt) "Run this on files change?"; then
            TIME=`date +%s`
            while true; do
                for f in ${FILES}; do
                    NEW_TIME="$(stat -c %Y $f)"
                    if [ $NEW_TIME -gt $TIME ]; then
                        clear
                        (eval "${CMD} $@")
                        TIME=$(($NEW_TIME + 3))
                        break
                    fi
                done
                sleep 1
            done
        fi
    else
        if [ "$1" == "pydebug" ]; then
            shift
            CMD=${CMD//python3/python3 -m pdb -c continue}
        fi
        echo "${CMD} $@"
        if GO_CALL(prompt) "Run this?"; then
            eval "${CMD} $@"
        fi
    fi
)

GO(error_message)
    grep -m 1 -iE '(error\>)|(cannot route)' ${SF_ROOT}/build/build.log

define({{build_target}}, {{
    if [ -n "$2" ]; then
        GO_CALL(sf_build) $1_$2 || return
    fi}})

GO(shifter)
    build_target(dram_shifter_$1, $2)
    cd ${SF_ROOT}/build/xc7/tests/dram_shifter/dram_shifter_${1}/artix7-xc7a50t-basys3-roi-virt-xc7a50t-basys3-test

GO(bshifter)
    build_target(bram_shifter_$1, $2)
    cd ${SF_ROOT}/build/xc7/tests/bram_shifter/bram_shifter_${1}/artix7-xc7a50t-basys3-roi-virt-xc7a50t-basys3-test

GO(dram_test)
    if [ "$2" == "run" ]
    then
        if [ "$3" != "now" ]
        then
            build_target(dram_test_$1, prog)
        fi
        cd ${SF_ROOT}/build/xc7/tests/dram_test/dram_test_${1}/artix7-xc7a50t-basys3-roi-virt-xc7a50t-basys3-test
        python ${SF_ROOT}/xc7/tests/common/read_uart.py --baud 500000 /dev/ttyUSB1
    else
        build_target(dram_test_$1, $2)
        cd ${SF_ROOT}/build/xc7/tests/dram_test/dram_test_${1}/artix7-xc7a50t-basys3-roi-virt-xc7a50t-basys3-test
    fi

GO(bram_test)
    __BRAM_TEST=bram
    if [[ $1 == *"init"* || $1 == *"sdp"* ]]; then
        __BRAM_TEST=${__BRAM_TEST}_$1
        shift
    fi
    __BRAM_TEST=${__BRAM_TEST}_test

    if [ "$2" == "run" ]
    then
        if [ "$3" != "now" ]
        then
            build_target(${__BRAM_TEST}_$1, prog)
        fi
        cd ${SF_ROOT}/build/xc7/tests/${__BRAM_TEST}/${__BRAM_TEST}_$1/artix7-xc7a50t-basys3-roi-virt-xc7a50t-basys3-test
        python ${SF_ROOT}/xc7/tests/common/read_uart.py --baud 500000 /dev/ttyUSB1
    else
        build_target(${__BRAM_TEST}_$1, $2)
        cd ${SF_ROOT}/build/xc7/tests/${__BRAM_TEST}/${__BRAM_TEST}_$1/artix7-xc7a50t-basys3-roi-virt-xc7a50t-basys3-test
    fi

GO(dram)
    build_target(dram_$1, $2)
    cd ${SF_ROOT}/build/xc7/tests/dram/dram_${1}/artix7-xc7a50t-basys3-roi-virt-xc7a50t-basys3-test

GO(set_sf)
    export SF_ROOT=$PWD

GO(scalable_proc)
    BLOCK({{
      GO_CALL(sf_build) top_$1_prog
      ${SF_ROOT}/tests/9-scalable_proc/utils/receiver.py --baud 500000
    }})

GO(serial_hex)
    BLOCK({{
      stty raw 500000 < /dev/ttyUSB1
      xxd /dev/ttyUSB1
    }})

GO(serial_ascii)
    screen /dev/ttyUSB2 115200

GO(sf_env)
    BLOCK({{
      cd ${SF_ROOT}
      make env
    }})

GO(to_test)
    WITH_SHOPT(nullglob, {{
      __dirs=( ${SF_ROOT}/build/*/tests/*/$1/*/ ${SF_ROOT}/build/tests/*/*/$1/*/ )
    }})
    __matches=${#__dirs[@]}
    if [ ${__matches} -lt 1 ]; then
        echo "No matches."
    elif [ ${__matches} -gt 1 ]; then
        echo "Which dir?"
        select dir in "${__dirs[@]}"; do
            cd ${dir}
            break
        done
    else
        cd ${__dirs[0]}
    fi
    unset __dirs
    unset __matches

GO(clear_cmake_cache)
    rm -f ${SF_ROOT}/build/CMakeCache.txt

GO(fix-conda)
    BLOCK({{
      rm -Ir ${SF_ROOT}/build/env
      make -C ${SF_ROOT}/build all_conda
    }})

GO(bit2fasm)
    source ~/src/prjxray/database/artix7/settings.sh
    source ~/src/prjxray/minitests/roi_harness/basys3-swbut.sh
    $XRAY_BIT2FASM --verbose --canonical $1.bit > $1.fasm

GO(diffasm) (
    FILTER1="s/_(X[0-9]+)?Y[0-9]+//g" # strip all _XnYn and _Yn
    # FILTER1="s/_X[0-9]+Y[0-9]+//" # strip _XnYn
    FILTER2="s/[=\[].*//"
    FILTER_CMD="sed -E -e \"${FILTER1}\" -e \"${FILTER2}\" | sort -u"
    colordiff --label "$2" --label "$3" -u3 \
              <(grep $1 $2 | eval ${FILTER_CMD}) \
              <(grep $1 $3 | eval ${FILTER_CMD}) | less -r
)

GO(fasm2bit)
    source ~/src/prjxray/database/artix7/settings.sh
    source ~/src/prjxray/minitests/roi_harness/basys3-swbut.sh
    BLOCK({{
      if [ "$2" == "noroi" ]; then
          $XRAY_FASM2FRAMES --db-root $XRAY_DATABASE_DIR/artix7 \
                            --sparse \
                            $1.fasm $1.frames
          $XRAY_TOOLS_DIR/xc7frames2bit --frm_file $1.frames \
                                        --output_file $1.bit \
                                        --part_name xc7a35tcpg236-1 \
                                        --part_file $XRAY_DATABASE_DIR/artix7/xc7a35tcpg236-1.yaml
      else
          $XRAY_FASM2FRAMES --db-root $XRAY_DATABASE_DIR/artix7 \
                            --sparse \
                            --roi $XRAY_DATABASE_DIR/artix7/harness/basys3/swbut/design.json \
                            $1.fasm $1.frames
          $XRAY_TOOLS_DIR/xc7patch --frm_file $1.frames \
                                   --output_file $1.bit \
                                   --bitstream_file $XRAY_DATABASE_DIR/artix7/harness/basys3/swbut/design.bit \
                                   --part_name xc7a35tcpg236-1 \
                                   --part_file $XRAY_DATABASE_DIR/artix7/xc7a35tcpg236-1.yaml
      fi
    }})

GO(find-makefile)
    grep -B 1 "cmake_echo_color.*\".*$1.*\"" ${SF_ROOT}/build/CMakeFiles/Makefile2 | head -n 1 | cut -d' ' -f 3
    grep -lr "cmake_echo_color.*\".*$1.*\"" ${SF_ROOT}/build --include build.make

GO(select-channels-db)
    echo "Which channels.db?"
    select db in `find ${SF_ROOT}/build/ -name channels.db`; do
        CHANNELS_DB=${db}
        break
    done


define({{QUERY}}, {{
IFS="|"
$1=( $(sqlite3 ${CHANNELS_DB} <<EOF
.separator "|" "|"
.nullvalue "NULL"
$2
EOF
) )
unset IFS
if [[ "${$1[@]}" ]]; then
    if [[ "${#$1[@]}" -gt 5 ]]; then
        echo "# $1"
        for i in "${$1[@]}"; do
            echo "$i"
        done
    else
        echo "$1: ${$1[@]}"
    fi
fi
}})dnl

# tile, site, pip, switch, or wire
GO(whats-this-pkey) (
    PKEY=$1

QUERY(TILE, {{
SELECT COALESCE(phy_tile.name, site.name) FROM tile
  LEFT JOIN phy_tile ON (tile.phy_tile_pkey = phy_tile.pkey)
  LEFT JOIN site_as_tile ON (tile.site_as_tile_pkey = site_as_tile.pkey)
  LEFT JOIN site ON (site_as_tile.pkey = site.pkey)
  WHERE tile.pkey = $PKEY;
}})

QUERY(SITE, {{
SELECT site_type.name || "_" || site.name FROM site
  INNER JOIN site_type ON (site.site_type_pkey = site_type.pkey)
  WHERE site.pkey = $PKEY;
}})

QUERY(SWITCH, {{
SELECT name FROM switch
  WHERE pkey = $PKEY;
}})

QUERY(PIP, {{
SELECT name FROM pip_in_tile
  WHERE pkey = $PKEY;
}})

QUERY(WIRE, {{
SELECT COALESCE(phy_tile.name, site.name) || "/" || wire_in_tile.name FROM wire
  LEFT JOIN tile ON (wire.tile_pkey = tile.pkey)
  LEFT JOIN phy_tile ON (tile.phy_tile_pkey = phy_tile.pkey)
  LEFT JOIN site_as_tile ON (tile.site_as_tile_pkey = site_as_tile.pkey)
  LEFT JOIN site ON (site_as_tile.pkey = site.pkey)
  LEFT JOIN wire_in_tile ON (wire.wire_in_tile_pkey = wire_in_tile.pkey)
  WHERE wire.pkey = $PKEY;
}})

QUERY(WIRE_IN_TILE, {{
SELECT tile_type.name || "/" || wire_in_tile.name FROM wire_in_tile
  INNER JOIN tile_type ON (wire_in_tile.tile_type_pkey = tile_type.pkey)
  WHERE wire_in_tile.pkey = $PKEY;
}})

QUERY(GRAPH_NODE, {{
SELECT COALESCE(phy_tile.name, site.name) || "/" || wire_in_tile.name FROM graph_node
  LEFT JOIN node ON (graph_node.node_pkey = node.pkey)
  LEFT JOIN wire ON (node.site_wire_pkey = wire.pkey)
  LEFT JOIN tile ON (wire.tile_pkey = tile.pkey)
  LEFT JOIN phy_tile ON (tile.phy_tile_pkey = phy_tile.pkey)
  LEFT JOIN site_as_tile ON (tile.site_as_tile_pkey = site_as_tile.pkey)
  LEFT JOIN site ON (site_as_tile.pkey = site.pkey)
  LEFT JOIN wire_in_tile ON (wire.wire_in_tile_pkey = wire_in_tile.pkey)
  WHERE graph_node.pkey = $PKEY;
}})
)

GO(show-wires) (
    PKEY=$1

QUERY(GRAPH_WIRES, {{
SELECT phy_tile.name || "/" || wire_in_tile.name FROM graph_node
  INNER JOIN wire ON (graph_node.node_pkey = wire.node_pkey)
  INNER JOIN wire_in_tile ON (wire.wire_in_tile_pkey = wire_in_tile.pkey)
  INNER JOIN phy_tile ON (wire.phy_tile_pkey = phy_tile.pkey)
  WHERE graph_node.pkey = $PKEY;
}})

QUERY(NODE_WIRES, {{
SELECT phy_tile.name || "/" || wire_in_tile.name FROM wire
  INNER JOIN wire_in_tile ON (wire.wire_in_tile_pkey = wire_in_tile.pkey)
  INNER JOIN phy_tile ON (wire.phy_tile_pkey = phy_tile.pkey)
  WHERE wire.node_pkey = $PKEY;
}})
)

GO(graph_edges) (
    if [ -z "$1" ]; then
        return
    fi

    QUERY(SOURCES, {{
    SELECT phy_tile.name || "/" || wire_in_tile.name FROM graph_edge
      INNER JOIN graph_node ON (graph_edge.src_graph_node_pkey = graph_node.pkey)
      INNER JOIN wire ON (graph_node.node_pkey = wire.node_pkey)
      INNER JOIN wire_in_tile ON (wire.wire_in_tile_pkey = wire_in_tile.pkey)
      INNER JOIN phy_tile ON (wire.phy_tile_pkey = phy_tile.pkey)
      WHERE graph_edge.dest_graph_node_pkey = $1;
    }})

    QUERY(SINKS, {{
    SELECT phy_tile.name || "/" || wire_in_tile.name FROM graph_edge
      INNER JOIN graph_node ON (graph_edge.dest_graph_node_pkey = graph_node.pkey)
      INNER JOIN wire ON (graph_node.node_pkey = wire.node_pkey)
      INNER JOIN wire_in_tile ON (wire.wire_in_tile_pkey = wire_in_tile.pkey)
      INNER JOIN phy_tile ON (wire.phy_tile_pkey = phy_tile.pkey)
      WHERE graph_edge.src_graph_node_pkey = $1;
    }})
)

GO(get_node) (
    IFS="/"
    NAME=( $1 )
    unset IFS

QUERY(NODE, {{
SELECT node.pkey, node.classification FROM node
  INNER JOIN wire ON (node.pkey = wire.node_pkey)
  INNER JOIN wire_in_tile ON (wire.wire_in_tile_pkey = wire_in_tile.pkey)
  INNER JOIN phy_tile ON (wire.phy_tile_pkey = phy_tile.pkey)
  WHERE phy_tile.name = "${NAME[0]}" AND
        wire_in_tile.name = "${NAME[1]}";
}})

if [ -n "${NODE}" ]; then
  CLASSIFICATION=(NULL NULL CHANNEL EDGES_TO_CHANNEL EDGE_WITH_MUX)
  echo "CLASSIFICATION: ${CLASSIFICATION[${NODE[1]}]}"

  QUERY(WIRES, {{
  SELECT phy_tile.name || "/" || wire_in_tile.name || " " ||
         "(" || phy_tile.grid_x || "," || phy_tile.grid_y || ")" FROM wire
    INNER JOIN wire_in_tile ON (wire.wire_in_tile_pkey = wire_in_tile.pkey)
    INNER JOIN phy_tile ON (wire.phy_tile_pkey = phy_tile.pkey)
    WHERE wire.node_pkey = ${NODE};
  }})

  QUERY(GRAPH_NODE, {{
  SELECT pkey FROM graph_node
    WHERE node_pkey = ${NODE[0]};
  }})
fi
)

GO(find-wire-at) (
    WIRE=$1
    LOC=($2 $3)

  QUERY(WIRES, {{
  SELECT phy_tile.name || "/" || wire_in_tile.name FROM wire
    INNER JOIN wire_in_tile ON (wire.wire_in_tile_pkey = wire_in_tile.pkey)
    INNER JOIN phy_tile ON (wire.phy_tile_pkey = phy_tile.pkey)
    INNER JOIN tile ON (wire.tile_pkey = tile.pkey)
    WHERE wire_in_tile.name = "${WIRE}" AND
          tile.grid_x = ${LOC[0]} AND
          tile.grid_y = ${LOC[1]};
  }})
)

GO(list-tiles-at) (
    LOC=($1 $2)

  QUERY(TILE_TYPE, {{
  SELECT tile_type.name FROM tile
    INNER JOIN tile_type ON (tile.tile_type_pkey = tile_type.pkey)
    WHERE tile.grid_x = ${LOC[0]} AND
          tile.grid_y = ${LOC[1]};
  }})

#  QUERY(PHY_TILES, {{
#  SELECT DISTINCT phy_tile.name FROM wire
#    INNER JOIN phy_tile ON (wire.phy_tile_pkey = phy_tile.pkey)
#    INNER JOIN tile ON (wire.tile_pkey = tile.pkey)
#    WHERE tile.grid_x = ${LOC[0]} AND
#          tile.grid_y = ${LOC[1]};
#  }})

  QUERY(PHY_TILES, {{
  SELECT DISTINCT phy_tile.name FROM tile_map
    INNER JOIN phy_tile ON (tile_map.phy_tile_pkey = phy_tile.pkey)
    INNER JOIN tile ON (tile_map.tile_pkey = tile.pkey)
    WHERE tile.grid_x = ${LOC[0]} AND
          tile.grid_y = ${LOC[1]};
  }})
)

GO(intratile-pips)
  QUERY(TILE_TYPE_A, {{ SELECT pkey FROM tile_type WHERE name = "$1"; }})
  QUERY(TILE_TYPE_B, {{ SELECT pkey FROM tile_type WHERE name = "$2"; }})
  QUERY(PIPS, {{
  SELECT DISTINCT pip_in_tile.name FROM pip_in_tile
    JOIN wire_in_tile src ON (pip_in_tile.src_wire_in_tile_pkey = src.pkey)
    JOIN wire_in_tile dest ON (pip_in_tile.dest_wire_in_tile_pkey = dest.pkey)
    WHERE src.tile_type_pkey IN (${TILE_TYPE_A}, ${TILE_TYPE_B}) AND
          dest.tile_type_pkey IN (${TILE_TYPE_A}, ${TILE_TYPE_B}) AND
          src.tile_type_pkey != dest.tile_type_pkey;
  }})

GO(pad-to-vpr-coord)
  PACKAGE_PINS=${SF_ROOT}/third_party/prjxray-db/artix7/xc7a35tcpg236-1_package_pins.csv
  TILE="`rg "^$1,.*" ${PACKAGE_PINS} | cut -d',' -f 3`"
  if [ -z "$TILE" ]; then
      echo "Pad not found"
      return
  fi
  echo "$1 is in ${TILE}"
  SUFFIX="`echo ${TILE} | cut -d'_' -f 2`"
  QUERY(COORDS, {{
  SELECT grid_x, grid_y FROM tile
    WHERE phy_tile_pkey = (SELECT pkey FROM phy_tile WHERE name like "%IOI%_${SUFFIX}")
  }})

GO(phy-tile-type-at)
  QUERY(PHY_TILE_TYPE, {{
  SELECT tile_type.name FROM tile
    JOIN phy_tile ON (tile.phy_tile_pkey = phy_tile.pkey)
    JOIN tile_type ON (phy_tile.tile_type_pkey = tile_type.pkey)
    WHERE tile.grid_x = $1 AND tile.grid_y = $2;
  }})

undefine({{QUERY}})dnl

GO(grep-graph) (
    NODE_ID=$1
    RR_GRAPH=${SF_ROOT}/build/xc7/archs/artix7/devices/rr_graph_xc7a50t-basys3_test.rr_graph.real.xml
    RR_GRAPH_PREPROCESSED=${RR_GRAPH}.pp.lz4
    if [ ! -f ${RR_GRAPH_PREPROCESSED} -o ${RR_GRAPH} -nt ${RR_GRAPH_PREPROCESSED} ]; then
        echo "preprocessing ${RR_GRAPH} ..."
        time xmllint --format ${RR_GRAPH} | lz4 > ${RR_GRAPH_PREPROCESSED}
        echo "done."
    fi
    lz4cat ${RR_GRAPH_PREPROCESSED} | rg "${NODE_ID}"
)

GO(less-graph) (
    NODE_ID=$1
    RR_GRAPH=${SF_ROOT}/build/xc7/archs/artix7/devices/rr_graph_xc7a50t-basys3_test.rr_graph.real.xml
    RR_GRAPH_PREPROCESSED=${RR_GRAPH}.pp.lz4
    if [ ! -f ${RR_GRAPH_PREPROCESSED} -o ${RR_GRAPH} -nt ${RR_GRAPH_PREPROCESSED} ]; then
        echo "preprocessing ${RR_GRAPH} ..."
        time xmllint --format ${RR_GRAPH} | lz4 > ${RR_GRAPH_PREPROCESSED}
        echo "done."
    fi
    lz4cat ${RR_GRAPH_PREPROCESSED} | less
)

GO(lookup-rr-node-in-db) (
    PYTHONPATH=${SF_ROOT}/utils
    python3 ${SF_ROOT}/xc7/utils/prjxray_lookup_inode.py \
            --rrgraph_node_map ${SF_ROOT}/build/xc7/archs/artix7/devices/rr_graph_xc7a50t-basys3_test.rr_graph.real.xml.node_map.pickle \
            --connection_database ${SF_ROOT}/build/xc7/archs/artix7/devices/xc7a50t-basys3-roi-virt/channels.db --inode $1
)

GO(open_channels_db)
    sqlite3 ${CHANNELS_DB}

GO(lookahead) (

    export VPR_NUM_WORKERS=`nproc`
    export CPUPROFILE=/tmp/vpr.prof

    cd ${SF_ROOT}/build/xc7/archs/artix7/devices

    case "$1" in
        conda)
            VPR=${SF_ROOT}/build/env/conda/bin/vpr
            ;;
        src)
            VPR=${HOME}/src/symbiflow/vtr-verilog-to-routing/vpr/vpr
            ;;
        lldb)
            VPR="lldb -- ${HOME}/src/symbiflow/vtr-verilog-to-routing/vpr/vpr"
            ;;
        gdb)
            VPR="gdb --args ${HOME}/src/symbiflow/vtr-verilog-to-routing/vpr/vpr"
            ;;
        prof)
            pprof ${HOME}/src/symbiflow/vtr-verilog-to-routing/vpr/vpr ${CPUPROFILE}
            return
            ;;
        log)
            less -r ${SF_ROOT}/build/lookahead.log
            return
            ;;
        freq)
            sort ${SF_ROOT}/build/lookahead.log | uniq -c | sort -nr | head -n ${2:-10}
            return
            ;;
        *)
            echo "which VPR?"
            return
            ;;
    esac

    case "$2" in
        small)
            DEVICE=xc7a50t-basys3
            DEVICE_ROI=${DEVICE}-roi
            ;;
        big | large)
            DEVICE=xc7a50t
            DEVICE_ROI=${DEVICE}
            ;;
        *)
            echo "what size?"
            return
            ;;
    esac

    WITH_LOG(${SF_ROOT}/build/lookahead.log, {{
      ${VPR} ${SF_ROOT}/build/xc7/archs/artix7/devices/${DEVICE_ROI}-virt/arch.timing.xml \
               --device ${DEVICE}-test ${SF_ROOT}/common/wire.eblif \
               --read_rr_graph ${SF_ROOT}/build/xc7/archs/artix7/devices/rr_graph_${DEVICE}_test.rr_graph.real.xml \
               --outfile_prefix ${DEVICE}_test_cache \
               --pack \
               --place \
               --write_router_lookahead rr_graph_${DEVICE}_test.lookahead.bin \
               --write_placement_delay_lookup rr_graph_${DEVICE}_test.place_delay.bin \
               --constant_net_method route \
               --clock_modeling route \
               --place_delay_model delta_override \
               --router_lookahead connection_box_map \
               --disable_errors check_unbuffered_edges:check_route:check_place \
               --suppress_warnings sum_pin_class:check_unbuffered_edges:load_rr_indexed_data_T_values:check_rr_node:trans_per_R \
               --route_chan_width 500 \
               --allowed_tiles_for_delay_model BLK-TL-SLICEL,BLK-TL-SLICEM
    }})
)

GO(install-sdf-timing)
    pip install -e ${SF_ROOT}/third_party/python-sdf-timing --prefix ${TMPDIR}

GO(mergable-wip)
    OK_BRANCHES=""
    CONFLICTING_BRANCHES=""
    for b in `git branch -r --list "${1:-origin}/wip/*"`
    do
        if GO_CALL(ok2merge) "$b"
        then
            OK_BRANCHES="${OK_BRANCHES} $b"
        else
            CONFLICTING_BRANCHES="${CONFLICTING_BRANCHES} $b"
        fi
    done

GO(route-murax) (
    case "$1" in
        small)
            DEVICE=xc7a50t-basys3-roi-virt
            TESTDIR=tests/9-soc/murax/murax_basys/artix7-xc7a50t-basys3-roi-virt-xc7a50t-basys3-test
            GRAPH=xc7a50t-basys3
            ;;
        big | large)
            DEVICE=xc7a50t-virt
            TESTDIR=tests/9-soc/murax/murax_basys_x1y0/artix7-xc7a50t-roi-virt-xc7a50t-test
            GRAPH=xc7a50t
            ;;
        *)
            echo "what size?"
            return
            ;;
    esac

   cd ${SF_ROOT}/build/${TESTDIR}

   ${HOME}/src/symbiflow/vtr-verilog-to-routing/vpr/vpr \
          ${SF_ROOT}/build/xc7/archs/artix7/devices/${DEVICE}/arch.timing.xml \
          ${SF_ROOT}/build/${TESTDIR}/toplevel.eblif \
          --device ${GRAPH}-test \
          --read_rr_graph ${SF_ROOT}/build/xc7/archs/artix7/devices/rr_graph_${GRAPH}_test.rr_graph.real.xml \
          --min_route_chan_width_hint 100 \
          --max_router_iterations 500 \
          --routing_failure_predictor off \
          --router_high_fanout_threshold -1 \
          --constant_net_method route \
          --route_chan_width 500 \
          --clock_modeling route \
          --place_delay_model delta_override \
          --router_lookahead connection_box_map \
          --clustering_pin_feasibility_filter off \
          --disable_check_route on \
          --strict_checks off \
          --allow_dangling_combinational_nodes on \
          --disable_errors check_unbuffered_edges:check_route \
          --congested_routing_iteration_threshold 0.8 \
          --incremental_reroute_delay_ripup off \
          --base_cost_type delay_normalized_length_bounded \
          --astar_fac 1.2 \
          --bb_factor 10 \
          --initial_pres_fac 4.0 \
          --disable_check_rr_graph on \
          --suppress_warnings ${SF_ROOT}/build/${TESTDIR}/noisy_warnings.log,sum_pin_class:check_unbuffered_edges:load_rr_indexed_data_T_values:check_rr_node:trans_per_R \
          --sdc_file ${SF_ROOT}/build/tests/9-soc/murax/basys3.sdc \
          --read_router_lookahead ${SF_ROOT}/build/xc7/archs/artix7/devices/rr_graph_${GRAPH}_test.lookahead.bin \
          --read_placement_delay_lookup ${SF_ROOT}/build/xc7/archs/artix7/devices/rr_graph_${GRAPH}_test.place_delay.bin \
          --route
)

GO(use-my)
  case "$1" in
    vpr)
      export VPR=${HOME}/src/symbiflow/vtr-verilog-to-routing/vpr/vpr
      ;;
    *)
      echo "Unknown command"
      ;;
  esac
