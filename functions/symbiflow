# -*- mode: sh -*-

SF_ROOT=${SF_ROOT:-${HOME}/src/symbiflow-arch-defs}

GO(sf) {
    cd ${SF_ROOT}
    if [ "$FHS_USER_ENV" != "true" ]
    then
        nix-shell ~/nix/sf-shell.nix
    fi
}

GO(bit2vivado) {
    source ~/src/prjxray/database/artix7/settings.sh
    source ~/src/prjxray/minitests/roi_harness/basys3-swbut.sh
    BLOCK({{
      FILE(runme.tcl, {{
create_project -force -part $::env(XRAY_PART) design design

read_verilog top_bit.v
synth_design -top top
write_checkpoint -force design_pre_force.dcp
source top_bit.v.tcl

create_clock -period 10.000 -name clk -waveform {0.000 5.000} [get_ports clk]

set_property CFGBVS VCCO [current_design]
set_property CONFIG_VOLTAGE 3.3 [current_design]
set_property BITSTREAM.GENERAL.PERFRAMECRC YES [current_design]
set_property IS_ENABLED 0 [get_drc_checks {LUTLP-1}]

write_checkpoint -force design_pre_place.dcp
place_design
route_design

write_checkpoint -force design.dcp
write_bitstream -force design.bit
save_project_as -force design.xpr}})
      ${XRAY_VIVADO} -source runme.tcl
      ${XRAY_BITREAD} -F $XRAY_ROI_FRAMES -o design.bits -z -y design.bit
      ${XRAY_BIT2FASM} --verbose design.bit > design.fasm
    }})
}

GO(open_in_vivado) {
    source ~/src/prjxray/database/artix7/settings.sh
    source ~/src/prjxray/minitests/roi_harness/basys3-swbut.sh
    BLOCK({{
      FILE_VAR(runme.tcl, {{
create_project -force -part \$::env(XRAY_PART) design design

foreach v {$@} {
  read_verilog \$v
}
synth_design -top top

set_property CFGBVS VCCO [current_design]
set_property CONFIG_VOLTAGE 3.3 [current_design]
set_property BITSTREAM.GENERAL.PERFRAMECRC YES [current_design]

set pins {tx       A18
          rx       B18
          sw[0]    V17
          sw[1]    V16
          sw[2]    W16
          sw[3]    W17
          sw[4]    W15
          sw[5]    V15
          sw[6]    W14
          sw[7]    W13
          sw[8]    V2
          sw[9]    T3
          sw[10]   T2
          sw[11]   R3
          sw[12]   W2
          sw[13]   U1
          sw[14]   T1
          sw[15]   R2
          in[0]    V17
          in[1]    V16
          in[2]    W16
          in[3]    W17
          in[4]    W15
          in[5]    V15
          in[6]    W14
          in[7]    W13
          in[8]    V2
          in[9]    T3
          in[10]   T2
          in[11]   R3
          in[12]   W2
          in[13]   U1
          in[14]   T1
          in[15]   R2
          led[0]   U16
          led[1]   E19
          led[2]   U19
          led[3]   V19
          led[4]   W18
          led[5]   U15
          led[6]   U14
          led[7]   V14
          led[8]   V13
          led[9]   V3
          led[10]  W3
          led[11]  U3
          led[12]  P3
          led[13]  N3
          led[14]  P1
          led[15]  L1
          out[0]   U16
          out[1]   E19
          out[2]   U19
          out[3]   V19
          out[4]   W18
          out[5]   U15
          out[6]   U14
          out[7]   V14
          out[8]   V13
          out[9]   V3
          out[10]  W3
          out[11]  U3
          out[12]  P3
          out[13]  N3
          out[14]  P1
          out[15]  L1
          clk      W5}

foreach {port_name pin} \$pins {
    set ports [get_ports \$port_name]
    if { [llength \$ports] > 0 } {
        set_property -dict "PACKAGE_PIN \$pin IOSTANDARD LVCMOS33" \$ports
    }
}

write_checkpoint -force design_pre_place.dcp
place_design
route_design

write_checkpoint -force design.dcp
write_bitstream -force design.bit
save_project_as -force design.xpr}})
      ${XRAY_VIVADO} -source runme.tcl
    }})
}

GO(write_bit) {
    source ~/src/prjxray/database/artix7/settings.sh
    openocd -f $XRAY_DIR/utils/openocd/board-digilent-basys3.cfg -c "init; pld load 0 $1; exit" || return
}

function __sf_build() {
    if [ ! -d ${SF_ROOT} ]; then
        return
    elif [ ! -d ${SF_ROOT}/build ]; then
        make -C ${SF_ROOT} env
    fi
    make -C ${SF_ROOT}/build $@
}

define({{build_target}}, {{
    if [ -n "$2" ]; then
        __sf_build $1_$2 || return
    fi}})

GO(shifter) {
    build_target(dram_shifter_$1, $2)
    cd ${SF_ROOT}/build/xc7/tests/dram_shifter/dram_shifter_${1}/artix7-xc7a50t-basys3-roi-virt-xc7a50t-basys3-test
}

GO(bshifter) {
    build_target(bram_shifter, $1)
    cd ${SF_ROOT}/build/xc7/tests/bram_shifter/bram_shifter/artix7-xc7a50t-basys3-roi-virt-xc7a50t-basys3-test
}

GO(dram_test) {
    if [ "$2" == "run" ]
    then
        if [ "$3" != "now" ]
        then
            build_target(dram_test_$1, prog)
        fi
        cd ${SF_ROOT}/build/xc7/tests/dram_test/dram_test_${1}/artix7-xc7a50t-basys3-roi-virt-xc7a50t-basys3-test
        python ${SF_ROOT}/xc7/tests/common/read_uart.py --baud 500000 /dev/ttyUSB1
    else
        build_target(dram_test_$1, $2)
        cd ${SF_ROOT}/build/xc7/tests/dram_test/dram_test_${1}/artix7-xc7a50t-basys3-roi-virt-xc7a50t-basys3-test
    fi
}

GO(dram) {
    build_target(dram_$1, $2)
    cd ${SF_ROOT}/build/xc7/tests/dram/dram_${1}/artix7-xc7a50t-basys3-roi-virt-xc7a50t-basys3-test
}

GO(set_sf) {
    export SF_ROOT=$PWD
}

GO(top_dram_n3) {
    BLOCK({{
      __sf_build top_dram_n3_prog
      ${SF_ROOT}/tests/9-scalable_proc/utils/receiver.py --baud 500000
    }})
}

GO(serial_hex) {
    BLOCK({{
      stty raw 500000 < /dev/ttyUSB1
      xxd /dev/ttyUSB1
    }})
}

GO(serial_ascii) {
    screen /dev/ttyUSB1 115200
}

GO(sf_env) {
    BLOCK({{
      cd ${SF_ROOT}
      make env
    }})
}

GO(to_test) {
    WITH_SHOPT(nullglob, {{
      __dirs=( ${SF_ROOT}/build/*/tests/*/$1/*/ ${SF_ROOT}/build/tests/*/*/$1/*/ )
    }})
    __matches=${#__dirs[@]}
    if [ ${__matches} -lt 1 ]; then
        echo "No matches."
    elif [ ${__matches} -gt 1 ]; then
        echo "Which dir?"
        select dir in "${__dirs[@]}"; do
            cd ${dir}
            break
        done
    else
        cd ${__dirs[0]}
    fi
    unset __dirs
    unset __matches
}
