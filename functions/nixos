# -*- mode: sh -*-

GO(switch)
    BLOCK({{
      sudo nixos-rebuild switch $@
    }})

GO(upgrade)
    BLOCK({{
      sudo nixos-rebuild switch --upgrade
      nix-env --upgrade
      sudo nix-collect-garbage --delete-older-than 30d
    }})

GO(shell)
    if [ "$1" ]; then
        nix-shell '<nixpkgs>' -A $1
    else
        echo "Package name required."
    fi

GO(build)
    if [ "$1" ]; then
        nix-shell '<nixpkgs>' -A $1 --command 'configurePhase && buildPhase; return;'
    else
        echo "Package name required."
    fi

GO(upgrade-channel)
    sudo nix-channel --add https://nixos.org/channels/nixos-$1 nixos

GO(install-with-channel)
    nix-env --arg pkgs "import (builtins.fetchTarball channel:$1) ({ config.allowUnfree = true; })" -f . -iA $2

# https://nixos.wiki/wiki/Cheatsheet#Adding_files_to_the_store
GO(store-large-file)
    BLOCK({{
      LARGE_FILE="`realpath $1`"
      (sudo unshare -m bash) <<EOF
set -x
HASH=\$(nix-hash --type sha256 --flat --base32 ${LARGE_FILE})
STOREPATH=\$(nix-store --print-fixed-path sha256 \${HASH} $(basename ${LARGE_FILE}))
mount -o remount,rw /nix/store
cp $LARGE_FILE \$STOREPATH
printf "\$STOREPATH\n\n0\n" | nix-store --register-validity --reregister
EOF
    }})

GO(dev-kmod)
    case "$1" in
        "start")
            nix-shell '<nixpkgs>' -A linux.dev
            ;;

        "build")
            make -C $(nix-build -E '(import <nixpkgs> {}).linux.dev' --no-out-link)/lib/modules/*/build M=$(pwd) modules
            ;;
    esac
